PROJECT(mibench)

SET(MLONMCU_SW_MIBENCH_DIR
    ""
    CACHE PATH "mlonmcu-sw-mibench source directory"
)

IF(NOT MLONMCU_SW_MIBENCH_DIR)
    MESSAGE(FATAL_ERROR "Undefined: MLONMCU_SW_MIBENCH_DIR")
ENDIF()

SET(MIBENCH_BENCHMARK
    ""
    CACHE STRING "Specify which benchmark to run."
)
# SET_PROPERTY(CACHE MIBENCH_BENCHMARK PROPERTY STRINGS TODO)

IF(NOT MIBENCH_BENCHMARK)
    MESSAGE(FATAL_ERROR "Undefined: MIBENCH_BENCHMARK")
ENDIF()

SET(BENCH_DIR ${MLONMCU_SW_MIBENCH_DIR}/${MIBENCH_BENCHMARK})
get_filename_component(BENCH_NAME ${MIBENCH_BENCHMARK} NAME)
SET(BENCH_FILE ${BENCH_DIR}/${BENCH_NAME}.c)
FILE(GLOB BENCH_SRCS ${BENCH_DIR}/*.c)
LIST(REMOVE_ITEM BENCH_SRCS ${BENCH_FILE})

COMMON_ADD_LIBRARY(${PROJECT_NAME} STATIC ${BENCH_SRCS} mibench.c)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC . ${BENCH_DIR})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC m support)
# TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PUBLIC WARMUP_HEAT=0 CPU_MHZ=1)
# TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PRIVATE -Wno-implicit-function-declaration)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC "${CMAKE_CURRENT_BINARY_DIR}")
CONFIGURE_FILE(mibench_wrapper.h.in ${CMAKE_CURRENT_BINARY_DIR}/mibench_wrapper.h @ONLY)

IF(${GLOBAL_ISEL})
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:C>:-mllvm -global-isel=1>")
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:CXX>:-mllvm -global-isel=1>")
SET(GLOBAL_ISEL_ABORT 2)
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:C>:-mllvm -global-isel-abort=${GLOBAL_ISEL_ABORT}>")
target_compile_options(${PROJECT_NAME} PRIVATE "SHELL:$<$<COMPILE_LANGUAGE:CXX>:-mllvm -global-isel-abort=${GLOBAL_ISEL_ABORT}>")
ENDIF()
